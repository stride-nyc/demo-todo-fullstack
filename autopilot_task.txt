User Story: As a user, I want a 'delete' button for my Todo items so that I can easily remove tasks that are no longer needed.

Acceptance Criteria:
	•	A 'delete' button is visible next to each Todo item in the list.
	•	Clicking the 'delete' button removes the item from the list displayed on the frontend.
	•	The deletion is persisted, meaning the item is also removed from the database.
	•	After deletion, the Todo list is updated without requiring a page refresh.

Technical Details:
Frontend:
	Modification: In the App component, modify the JSX inside the map function that renders Todo items to include a 'delete' button next to each Todo item.
	Event Handling: Add an onClick event handler to the 'delete' button that calls a function, e.g., handleDeleteTodo, passing the Todo item's unique identifier (e.g., id) as an argument.
	State Update: In the handleDeleteTodo function, use the fetch API to send a DELETE request to the backend with the Todo item's id. Upon successful deletion, filter out the deleted Todo item from the todos state to update the UI.
Backend:
	Endpoint: Implement a new DELETE endpoint in the Express app, e.g., /api/todos/:id, where :id is the unique identifier of the Todo item to be deleted.
	Database Operation: In the DELETE endpoint handler, use the Knex library to execute a DELETE operation on the 'todos' table, targeting the row with the matching id.
	Response: After successful deletion, return a success status code (e.g., 200) and optionally, the updated list of Todo items.
Database:
	Schema: Ensure the 'todos' table schema includes a unique identifier (id) for each Todo item, which will be used to identify which item to delete.
Notes:
	Error Handling: Implement error handling for both frontend and backend. On the frontend, display a meaningful message if the deletion fails. On the backend, return an appropriate error response if the deletion operation fails or if the Todo item with the specified id does not exist.
	Testing: Update existing tests to cover the new 'delete' functionality. This includes unit tests for the backend endpoint and integration tests for the frontend to ensure the delete button works as expected.